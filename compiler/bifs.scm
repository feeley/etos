; file: "bifs.scm"

; Copyright (C) 1998-1999 Universite de Montreal, All Rights Reserved.

; This file contains a database of Erlang builtin functions and their
; properties.

(define bif-table '(
; module   function    arity  implicit
;  \        \            \    import?
;   \        \            \____   |
;    \        \                \  |
#("erlang" "is_atom"            1 #t)
#("erlang" "is_atom"            1 #t)
#("erlang" "is_binary"          1 #t)
#("erlang" "is_char"            1 #t)
#("erlang" "is_compound"        1 #t)
#("erlang" "is_cons"            1 #t)
#("erlang" "is_float"           1 #t)
#("erlang" "is_function"        1 #t)
#("erlang" "is_integer"         1 #t)
#("erlang" "is_list"            1 #t)
#("erlang" "is_null"            1 #t)
#("erlang" "is_number"          1 #t)
#("erlang" "is_pid"             1 #t)
#("erlang" "is_port"            1 #t)
#("erlang" "is_ref"             1 #t)
#("erlang" "is_string"          1 #t)
#("erlang" "is_tuple"           1 #t)
#("erlang" "atom_to_list"       1 #t)
#("erlang" "list_to_atom"       1 #t)
#("erlang" "abs"                1 #t)
#("erlang" "sign"               1 #t)
#("erlang" "float"              1 #t)
#("erlang" "float_to_list"      1 #t)
#("erlang" "integer_to_list"    1 #t)
#("erlang" "list_to_float"      1 #t)
#("erlang" "list_to_integer"    1 #t)
#("erlang" "round"              1 #t)
#("erlang" "trunc"              1 #t)
#("erlang" "binary_to_list"     1 #t)
#("erlang" "binary_to_list"     3 #t)
#("erlang" "binary_to_term"     1 #t)
#("erlang" "concat_binary"      1 #t)
#("erlang" "list_to_binary"     1 #t)
#("erlang" "size"               1 #t)
#("erlang" "split_binary"       2 #t)
#("erlang" "term_to_binary"     1 #t)
#("erlang" "element"            2 #t)
#("erlang" "list_to_tuple"      1 #t)
#("erlang" "setelement"         3 #t)
#("erlang" "tuple_to_list"      1 #t)
#("erlang" "hd"                 1 #t)
#("erlang" "length"             1 #t)
#("erlang" "tl"                 1 #t)
#("erlang" "check_process_code" 2 #f)
#("erlang" "delete_module"      1 #f)
#("erlang" "load_module"        2 #f)
#("erlang" "preloaded"          0 #f)
#("erlang" "purge_module"       1 #f)
#("erlang" "module_loaded"      1 #f)
#("erlang" "apply"              2 #t)
#("erlang" "apply"              3 #t)
#("erlang" "exit"               1 #t)
#("erlang" "exit"               2 #t)
#("erlang" "group_leader"       0 #t)
#("erlang" "group_leader"       2 #t)
#("erlang" "link"               1 #t)
#("erlang" "process_flag"       2 #t)
#("erlang" "process_info"       1 #t)
#("erlang" "process_info"       2 #t)
#("erlang" "processes"          0 #t)
#("erlang" "self"               0 #t)
#("erlang" "spawn"              3 #t)
#("erlang" "spawn"              4 #t)
#("erlang" "spawn_link"         3 #t)
#("erlang" "spawn_link"         4 #t)
#("erlang" "unlink"             1 #t)
#("erlang" "erase"              0 #t)
#("erlang" "erase"              1 #t)
#("erlang" "get"                0 #t)
#("erlang" "get"                1 #t)
#("erlang" "get_keys"           1 #t)
#("erlang" "put"                2 #t)
#("erlang" "disconnect_node"    1 #f)
#("erlang" "get_cookie"         0 #f)
#("erlang" "halt"               0 #f)
#("erlang" "is_alive"           0 #t)
#("erlang" "monitor_node"       2 #t)
#("erlang" "node"               0 #t)
#("erlang" "node"               1 #t)
#("erlang" "nodes"              0 #t)
#("erlang" "processes"          0 #t)
#("erlang" "set_cookie"         2 #f)
#("erlang" "set_node"           2 #t)
#("erlang" "set_node"           3 #f)
#("erlang" "statistics"         1 #t)
#("erlang" "register"           2 #t)
#("erlang" "registered"         0 #t)
#("erlang" "unregister"         1 #t)
#("erlang" "whereis"            1 #t)
#("erlang" "open_port"          2 #t)
#("erlang" "port_close"         1 #t)
#("erlang" "port_info"          1 #t)
#("erlang" "port_info"          2 #t)
#("erlang" "ports"              0 #t)
#("erlang" "date"               0 #t)
#("erlang" "hash"               2 #f)
#("erlang" "make_ref"           0 #t)
#("erlang" "now"                0 #t)
#("erlang" "throw"              1 #t)
#("erlang" "time"               0 #t)
))

(define implicitly-imported-functions (erl-nil))

(for-each
 (lambda (bif)
   (let ((module-name (vector-ref bif 0))
         (function-name (vector-ref bif 1))
         (arity (vector-ref bif 2))
         (implicit-import? (vector-ref bif 3)))
     (if implicit-import?
         (set! implicitly-imported-functions
               (erl-cons (erl-tuple (erl-tuple (erl-atom<-string function-name)
                                               (erl-int<-exact-integer arity))
                                    (erl-atom<-string module-name))
                         implicitly-imported-functions)))))
 bif-table)
